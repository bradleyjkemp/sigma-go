(sigma.Rule) {
  Title: (string) (len=34) "Potential XCSSET Malware Infection",
  Logsource: (sigma.Logsource) {
    Category: (string) (len=16) "process_creation",
    Product: (string) (len=5) "macos",
    Service: (string) "",
    Definition: (string) "",
    AdditionalFields: (map[string]interface {}) <nil>
  },
  Detection: (sigma.Detection) {
    Searches: (map[string]sigma.Search) (len=5) {
      (string) (len=16) "selection_1_curl": (sigma.Search) {
        node: (*yaml.Node)({
          Kind: (yaml.Kind) 8,
          Style: (yaml.Style) 0,
          Tag: (string) (len=5) "!!str",
          Value: (string) (len=16) "selection_1_curl",
          Anchor: (string) "",
          Alias: (*yaml.Node)(<nil>),
          Content: ([]*yaml.Node) <nil>,
          HeadComment: (string) "",
          LineComment: (string) "",
          FootComment: (string) "",
          Line: (int) 16,
          Column: (int) 3
        }),
        Keywords: ([]string) <nil>,
        EventMatchers: ([]sigma.EventMatcher) (len=1) {
          (sigma.EventMatcher) (len=3) {
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=20) "ParentImage|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 17,
                Column: (int) 5
              }),
              Field: (string) (len=11) "ParentImage",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=5) "/bash"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=14) "Image|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 18,
                Column: (int) 5
              }),
              Field: (string) (len=5) "Image",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=5) "/curl"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=20) "CommandLine|contains",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 19,
                Column: (int) 5
              }),
              Field: (string) (len=11) "CommandLine",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "contains"
              },
              Values: ([]interface {}) (len=3) {
                (string) (len=12) "/sys/log.php",
                (string) (len=15) "/sys/prepod.php",
                (string) (len=13) "/sys/bin/Pods"
              }
            }
          }
        }
      },
      (string) (len=17) "selection_1_https": (sigma.Search) {
        node: (*yaml.Node)({
          Kind: (yaml.Kind) 8,
          Style: (yaml.Style) 0,
          Tag: (string) (len=5) "!!str",
          Value: (string) (len=17) "selection_1_https",
          Anchor: (string) "",
          Alias: (*yaml.Node)(<nil>),
          Content: ([]*yaml.Node) <nil>,
          HeadComment: (string) "",
          LineComment: (string) "",
          FootComment: (string) "",
          Line: (int) 23,
          Column: (int) 3
        }),
        Keywords: ([]string) <nil>,
        EventMatchers: ([]sigma.EventMatcher) (len=1) {
          (sigma.EventMatcher) (len=1) {
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=20) "CommandLine|contains",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 24,
                Column: (int) 5
              }),
              Field: (string) (len=11) "CommandLine",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "contains"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=8) "https://"
              }
            }
          }
        }
      },
      (string) (len=17) "selection_other_1": (sigma.Search) {
        node: (*yaml.Node)({
          Kind: (yaml.Kind) 8,
          Style: (yaml.Style) 0,
          Tag: (string) (len=5) "!!str",
          Value: (string) (len=17) "selection_other_1",
          Anchor: (string) "",
          Alias: (*yaml.Node)(<nil>),
          Content: ([]*yaml.Node) <nil>,
          HeadComment: (string) "",
          LineComment: (string) "",
          FootComment: (string) "",
          Line: (int) 25,
          Column: (int) 3
        }),
        Keywords: ([]string) <nil>,
        EventMatchers: ([]sigma.EventMatcher) (len=1) {
          (sigma.EventMatcher) (len=3) {
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=20) "ParentImage|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 26,
                Column: (int) 5
              }),
              Field: (string) (len=11) "ParentImage",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=5) "/bash"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=14) "Image|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 27,
                Column: (int) 5
              }),
              Field: (string) (len=5) "Image",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=11) "/osacompile"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=24) "CommandLine|contains|all",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 28,
                Column: (int) 5
              }),
              Field: (string) (len=11) "CommandLine",
              Modifiers: ([]string) (len=2) {
                (string) (len=8) "contains",
                (string) (len=3) "all"
              },
              Values: ([]interface {}) (len=2) {
                (string) (len=7) "/Users/",
                (string) (len=26) "/Library/Group Containers/"
              }
            }
          }
        }
      },
      (string) (len=17) "selection_other_2": (sigma.Search) {
        node: (*yaml.Node)({
          Kind: (yaml.Kind) 8,
          Style: (yaml.Style) 0,
          Tag: (string) (len=5) "!!str",
          Value: (string) (len=17) "selection_other_2",
          Anchor: (string) "",
          Alias: (*yaml.Node)(<nil>),
          Content: ([]*yaml.Node) <nil>,
          HeadComment: (string) "",
          LineComment: (string) "",
          FootComment: (string) "",
          Line: (int) 31,
          Column: (int) 3
        }),
        Keywords: ([]string) <nil>,
        EventMatchers: ([]sigma.EventMatcher) (len=1) {
          (sigma.EventMatcher) (len=3) {
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=20) "ParentImage|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 32,
                Column: (int) 5
              }),
              Field: (string) (len=11) "ParentImage",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=5) "/bash"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=14) "Image|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 33,
                Column: (int) 5
              }),
              Field: (string) (len=5) "Image",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=7) "/plutil"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=24) "CommandLine|contains|all",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 34,
                Column: (int) 5
              }),
              Field: (string) (len=11) "CommandLine",
              Modifiers: ([]string) (len=2) {
                (string) (len=8) "contains",
                (string) (len=3) "all"
              },
              Values: ([]interface {}) (len=3) {
                (string) (len=11) "LSUIElement",
                (string) (len=7) "/Users/",
                (string) (len=26) "/Library/Group Containers/"
              }
            }
          }
        }
      },
      (string) (len=37) "selection_other_again_test_one_more_3": (sigma.Search) {
        node: (*yaml.Node)({
          Kind: (yaml.Kind) 8,
          Style: (yaml.Style) 0,
          Tag: (string) (len=5) "!!str",
          Value: (string) (len=37) "selection_other_again_test_one_more_3",
          Anchor: (string) "",
          Alias: (*yaml.Node)(<nil>),
          Content: ([]*yaml.Node) <nil>,
          HeadComment: (string) "",
          LineComment: (string) "",
          FootComment: (string) "",
          Line: (int) 38,
          Column: (int) 3
        }),
        Keywords: ([]string) <nil>,
        EventMatchers: ([]sigma.EventMatcher) (len=1) {
          (sigma.EventMatcher) (len=2) {
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=14) "Image|endswith",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 39,
                Column: (int) 5
              }),
              Field: (string) (len=5) "Image",
              Modifiers: ([]string) (len=1) {
                (string) (len=8) "endswith"
              },
              Values: ([]interface {}) (len=1) {
                (string) (len=4) "/zip"
              }
            },
            (sigma.FieldMatcher) {
              node: (*yaml.Node)({
                Kind: (yaml.Kind) 8,
                Style: (yaml.Style) 0,
                Tag: (string) (len=5) "!!str",
                Value: (string) (len=24) "CommandLine|contains|all",
                Anchor: (string) "",
                Alias: (*yaml.Node)(<nil>),
                Content: ([]*yaml.Node) <nil>,
                HeadComment: (string) "",
                LineComment: (string) "",
                FootComment: (string) "",
                Line: (int) 40,
                Column: (int) 5
              }),
              Field: (string) (len=11) "CommandLine",
              Modifiers: ([]string) (len=2) {
                (string) (len=8) "contains",
                (string) (len=3) "all"
              },
              Values: ([]interface {}) (len=3) {
                (string) (len=2) "-r",
                (string) (len=7) "/Users/",
                (string) (len=26) "/Library/Group Containers/"
              }
            }
          }
        }
      }
    },
    Conditions: (sigma.Conditions) (len=1) {
      (sigma.Condition) {
        node: (*yaml.Node)({
          Kind: (yaml.Kind) 8,
          Style: (yaml.Style) 0,
          Tag: (string) (len=5) "!!str",
          Value: (string) (len=57) "all of selection_1_* or 1 of selection_other_again_test_*",
          Anchor: (string) "",
          Alias: (*yaml.Node)(<nil>),
          Content: ([]*yaml.Node) <nil>,
          HeadComment: (string) "",
          LineComment: (string) "",
          FootComment: (string) "",
          Line: (int) 44,
          Column: (int) 14
        }),
        Search: (sigma.Or) (len=2) {
          (sigma.AllOfPattern) {
            Pattern: (string) (len=13) "selection_1_*"
          },
          (sigma.OneOfPattern) {
            Pattern: (string) (len=28) "selection_other_again_test_*"
          }
        },
        Aggregation: (sigma.AggregationExpr) <nil>
      }
    },
    Timeframe: (time.Duration) 0s
  },
  ID: (string) (len=36) "47d65ac0-c06f-4ba2-a2e3-d263139d0f51",
  Related: ([]sigma.RelatedRule) <nil>,
  Status: (string) (len=4) "test",
  Description: (string) (len=263) "Identifies the execution traces of the XCSSET malware. XCSSET is a macOS trojan that primarily spreads via Xcode projects and maliciously modifies applications. Infected users are also vulnerable to having their credentials, accounts, and other vital data stolen.",
  Author: (string) (len=32) "Tim Rauch (rule), Elastic (idea)",
  Level: (string) (len=6) "medium",
  References: ([]string) (len=2) {
    (string) (len=166) "https://github.com/elastic/protections-artifacts/commit/746086721fd385d9f5c6647cada1788db4aea95f#diff-f5deb07688e1a8dec9530bc3071967b2da5c16b482e671812b864c37beb28f08",
    (string) (len=59) "https://malpedia.caad.fkie.fraunhofer.de/details/osx.xcsset"
  },
  Tags: ([]string) (len=1) {
    (string) (len=26) "attack.command_and_control"
  },
  AdditionalFields: (map[string]interface {}) (len=2) {
    (string) (len=4) "date": (string) (len=10) "2022/10/17",
    (string) (len=14) "falsepositives": ([]interface {}) (len=1) {
      (string) (len=7) "Unknown"
    }
  }
}
